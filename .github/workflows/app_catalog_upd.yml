name: Update Flipper Application Catalog

on:
  push:
    branches:
      - main
    paths:
      - 'application.fam'

jobs:
  update-catalog:
    runs-on: ubuntu-latest

    env:
      CATALOG_REPO: flipper-application-catalog
      CATALOG_FORK_OWNER: ${{ github.repository_owner }}
      CATALOG_UPSTREAM_OWNER: flipperdevices
      COMMIT_USERNAME: ${{ github.actor}}
      COMMIT_EMAIL: ${{ github.actor }}@users.noreply.github.com
    
    steps:
    - name: Checkout app repo `${{ github.repository }}`
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: app
        
    - name: Get application.fam details
      run: |
        cd app
        NAME=$(grep -oP '(?<=name=\").*(?=\")' application.fam)
        APPID=$(grep -oP '(?<=appid=\").*(?=\")' application.fam)
        FAP_CATEGORY=$(grep -oP '(?<=fap_category=\").*(?=\")' application.fam)
        FAP_VERSION=$(grep -oP '(?<=fap_version=\()\d+, \d+(?=\))' application.fam)

        V_MAJOR=$(echo $FAP_VERSION | cut -d "," -f 1 | xargs)
        V_MINOR=$(echo $FAP_VERSION | cut -d "," -f 2 | xargs)
        
        echo "V_MAJOR=$V_MAJOR" >> "$GITHUB_ENV"
        echo "V_MINOR=$V_MINOR" >> "$GITHUB_ENV"
        echo "NAME=$(echo $NAME | sed -e 's/\[.*\]//' | xargs)" >> "$GITHUB_ENV"
        echo "APPID=$APPID" >> "$GITHUB_ENV"
        echo "FAP_CATEGORY=$FAP_CATEGORY" >> "$GITHUB_ENV"
        echo "BRANCH_NAME=${CATALOG_FORK_OWNER}/${APPID}_${V_MAJOR}.${V_MINOR}" >> "$GITHUB_ENV"
        
    - name: Checkout catalog fork `${{ env.CATALOG_FORK_OWNER }}/${{ env.CATALOG_REPO }}`
      uses: actions/checkout@v4
      with:
        repository: ${{ env.CATALOG_FORK_OWNER }}/${{ env.CATALOG_REPO }}
        path: ${{ env.CATALOG_REPO }}
        token: ${{ secrets.CATALOG_UPDATE_TOKEN }}
        
    - name: Create branch `${{ env.BRANCH_NAME }}`
      run: |
        cd $CATALOG_REPO
        git checkout -b "$BRANCH_NAME"
        git remote add upstream "https://x-access-token:${{ secrets.CATALOG_UPDATE_TOKEN }}@github.com/$CATALOG_UPSTREAM_OWNER/$CATALOG_REPO.git"        
        git fetch upstream main
        git remote -v
        git rebase --autosquash --autostash "upstream/main"

    - name: Update manifest.yml `commit_sha`
      # mkdir and touch are bad practice, as the folder & manifest should initially be created manually
      # (and this should be allowed to fail if they don't exist)
      # but this lets me run tests without my test app having been accepted into the catalog
      run: |
        MANIFEST_PATH=applications/$FAP_CATEGORY/$APPID/manifest.yml
        echo "MANIFEST_PATH=$MANIFEST_PATH" >> "$GITHUB_ENV"
        mkdir -p $CATALOG_REPO/$(dirname $MANIFEST_PATH)
        touch $CATALOG_REPO/$MANIFEST_PATH
        echo "commit_sha: ${{ github.sha }}" >> $CATALOG_REPO/$MANIFEST_PATH
#        sed -i 's/commit_sha: .*/commit_sha: ${{ github.sha }}/' $CATALOG_REPO/$MANIFEST_PATH

    - name: Commit
      run: |
        cd $CATALOG_REPO
        git config user.name "${COMMIT_USERNAME}"
        git config user.email "${COMMIT_EMAIL}"
        git add .
        git commit -m "Update ${NAME} manifest for v${V_MAJOR}.${V_MINOR} @ ${{ github.sha }}"
#        git push --force -u origin HEAD

    - name: Push
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.CATALOG_UPDATE_TOKEN }}
        directory: ${{ env.CATALOG_REPO }}
        branch: ${{ env.BRANCH_NAME }}
        repository: ${{ env.CATALOG_FORK_OWNER }}/${{ env.CATALOG_REPO }}
        force: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip' # caching pip dependencies

    - name: Setup dependencies & toolchain; validate bundle
      run: |
        cd $CATALOG_REPO
        pip install -r tools/requirements.txt
        ufbt update
        python3 tools/bundle.py --nolint $MANIFEST_PATH bundle.zip
